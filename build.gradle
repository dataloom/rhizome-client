plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'jacoco'
    id 'com.github.spotbugs' version '1.6.3'
    id 'org.jetbrains.kotlin.jvm' version '1.3.10'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.3.10'
}

/*
 * This block must remain above the apply block as it controls publishing" 
 */
ext.projectName = "rhizome-client"
ext.scmUrl = 'scm:git:https://github.com/geekbeast/rhizome-client.git'
ext.connectionUrl = 'scm:git:https://github.com/geekbeast/rhizome-client.git'
ext.developerConnectionUrl = 'scm:git:https://github.com/geekbeast/rhizome-client.git'

apply from: "https://raw.githubusercontent.com/openlattice/gradles/master/openlattice.gradle"

description = "Rhizome client libraries"
group = "com.openlattice"

sourceCompatibility = JavaVersion.VERSION_1_10
argetCompatibility = JavaVersion.VERSION_1_10


spotbugs {
    toolVersion = '3.1.5'
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

dependencies {
    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.7.1'
    compileOnly 'net.jcip:jcip-annotations:1.0'
    compileOnly 'com.github.spotbugs:spotbugs-annotations:3.1.3'
    testCompileOnly 'net.jcip:jcip-annotations:1.0'
    testCompileOnly 'com.github.spotbugs:spotbugs-annotations:3.1.3'

    compile group: "org.slf4j", name: "slf4j-api", version: "${slf4j_version}"

    /*
     * @Inject and @Nullable support
     */
    compile "javax.inject:javax.inject:${javax_inject_version}"

    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:${jackson_version}"
    compile 'com.esotericsoftware:kryo-shaded:4.0.0'
    compile 'com.esotericsoftware:minlog:1.3.0'
    compile 'com.esotericsoftware:reflectasm:1.11.3'
    compile 'org.objenesis:objenesis:2.4'

    compile group: 'com.amazonaws', name: 'aws-java-sdk-ec2', version: '1.11.50'
    compile 'com.amazonaws:aws-java-sdk-s3:1.11.50'

    compile "org.apache.commons:commons-lang3:${commonsLang_version}"
    compile "commons-io:commons-io:${commonsio_version}"

    compile "com.google.guava:guava:${guava_version}"
    compile "org.apache.olingo:odata-commons-api:${odata_version}"
    compile "org.apache.olingo:odata-commons-core:${odata_version}"
    compile "org.apache.olingo:odata-server-api:${odata_version}"
    compile "org.apache.olingo:odata-server-core:${odata_version}"

    compile "com.squareup.retrofit2:retrofit:${retrofit2_version}"

    compile "com.fasterxml.jackson.core:jackson-core:${jackson_version}"
    compile "com.fasterxml.jackson.core:jackson-databind:${jackson_version}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-guava:${jackson_version}"
    compile "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:${jackson_version}"
    compile "com.fasterxml.jackson.module:jackson-module-afterburner:${jackson_version}"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${jackson_version}"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jackson_version}"
    compile "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${jackson_version}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:${jackson_version}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jackson_version}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jackson_version}"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:${jackson_version}"
    compile "org.yaml:snakeyaml:${snakeyaml_version}"

    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    /*
     * Kryptnostic dependencies
     */
    if (project.hasProperty('developmentMode') && project.developmentMode) {
        logger.quiet(project.name + " using project dependencies.")


    } else {
        logger.quiet(project.name + " using jar dependencies.")

    }

    /*
     * TESTING
     */
    testCompile "junit:junit:${junit_version}"
    testCompile("org.mockito:mockito-all:${mockito_version}") {
        exclude module: 'hamcrest'
        exclude module: 'hamcrest-core'
    }
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}

install {
    configuration = configurations.published
}

eclipse {
    ext.downloadSources = true
    ext.downloadJavadoc = true
    ext.sourceCompatibility = JavaVersion.VERSION_1_10
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
